
import sys
import argparse
import os
import pickle

import global_var
import graph_analysis

#**** imports from our codebase *****
import src.graph_init

def run(args):
  if (args.resume): # Resume from a binary graph constructucted in the previous run
    with open(global_var.METAFILE, 'rb') as f:
      analysis_obj = pickle.load(f)    
  else: # Create a fresh graph object from the AC file
    analysis_obj= graph_analysis.graph_analysis_c() 
    if (args.dont_use_ac_file==0 and args.resume==0): # Use AC file
      analysis_obj.use_ac_file= 1
    else: # Use operation list generated by Laura's compiles
      analysis_obj.use_ac_file= 0
      if args.net != None:
        global_var.network= args.net
        global_var.refersh()
        src.graph_init.construct_graph(analysis_obj, args, global_var)
  
#  if (args.t):
  analysis_obj.test(args)
  exit(0)
    
#  analysis_obj.full_run(args)
  
 
  if (args.reorder):
    analysis_obj.reorder_operations()
  
 
  if (args.store):
    with open(global_var.METAFILE, 'wb') as f:
      pickle.dump(analysis_obj, f)

def main(argv=None):
  parser = argparse.ArgumentParser(description='Auto power estimation script')
  parser.add_argument('--net', type=str, choices=[\
    'alarm', \
    'alarm_2', \
    'asia', \
    'cancer', \
    'cancer_2', \
    'barley', \
    'win95pts', \
    'win95pts_2', \
    'hailfinder', \
    'hepar2', \
    'andes', \
    'andes_2', \
    'pigs', \
    'pigs_2' , \
    'link', \
    'munin', \
    'munin_2', \
    'HAR_TAN', \
    'HAR_NaiveBayes26F', \
    'HAR_TAN26F', \
    'UIWADS_NaiveBayes3F_class1' , \
    'UIWADS_NaiveBayes3F_class2', \
    'UNIMIB_NB_window10', \
    'UNIMIB_TAN_window10', \
    'mnist' , \
    'mnist_2', \
    'diabetes', \
    'mnist_985', \
    'uci_har_nb' , \
    'bnetflix', \
    'bbc', \
    'book', \
    'kdd', \
    'msnbc', \
    'baudio', \
    'cpu', \
    'eeg_eye', \
    'bank_note', \
    'bio_response', \
    'sbn' , \
    'adult', \
    'ad', \
    'audio', \
    'baudio', \
    'bbc_0-21', \
    'bbc', \
    'bnetflix', \
    'book', \
    'c20ng', \
    'cr52', \
    'cwebkb', \
    'dna-500', \
    'dna', \
    'elevators', \
    'exp-D15-N1000-C4', \
    'insurance', \
    'jester', \
    'kdd-6k', \
    'kdd', \
    'little_4var', \
    'mnist-antonio', \
    'mnist', \
    'msnbc_0-10', \
    'msnbc_0-115', \
    'msnbc_0-25', \
    'msnbc_0-50', \
    'msnbc_0-95', \
    'msnbc', \
    'msnbc-yitao-a', \
    'msnbc-yitao-b', \
    'msnbc-yitao-c', \
    'msnbc-yitao-d', \
    'msnbc-yitao-e', \
    'msnc_0-5', \
    'msweb', \
    'nltcs.10split', \
    'nltcs.clt', \
    'nltcs', \
    'plants', \
    'pumsb_star', \
    'simple2.1', \
    'simple2.2', \
    'simple2.3', \
    'simple2.4', \
    'simple2.5', \
    'simple2.6', \
    'tmovie', \
    'tretail', \
    'wilt', \
    'dot_for_paper', \
    'test_net'], \
    help='Enter the name of the network to be analysed')

  parser.add_argument('--cir_type', type=str, choices=['ac','log', 'psdd'], default='ac', help='Specify the type of circuit to be read. Default= ac')
  parser.add_argument('-reorder', action='store_true' , help='pass -reorder to convert the graph to binary graph and to reorder the operation list to also include leaf nodes')
  parser.add_argument('-resume', action='store_true' , help='pass -resume to load the saved object instead of creating a new instance of the object')
  parser.add_argument('-store', action='store_true' , help='pass -store to save the object to be used in future to resume processing')
  parser.add_argument('-dont_use_ac_file', action='store_true' , help='pass -dont_use_ac_file to not use .ac file and use operation list instead')
  parser.add_argument('-v', action='store_true' , help='for verbose output')
  parser.add_argument('-mac', action='store_true' , help='To break up the AC into 2-level MAC and sum, products')

  parser.add_argument('--tmode', type=str, \
      choices= [\
        'try', \
        'null', \
        'milp_optimization', \
        'float_add_opt', \
        'hw_tree_blocks', \
        'max_FixPt_err_query', \
        'output_min_max', \
        'munin_single_query_verify', \
        'eval_float_error', \
        'eval_fixed_error', \
        'adaptively_optimize_for_Fxpt', \
        'exhaust_search_for_max_error', \
        'dot_file_to_visualize_ac', \
        'float_add_optimization_exhaustive', \
        'generate_ASIP_cfile', \
        'vectorize_inputs_of_building_blocks', \
        'ac_eval_testset_error', \
        'scheduling_for_gather', \
        'post_scheduling', \
        'verif_helper', \
        'ac_eval', \
        'compile_for_async_arch', \
        'openmp', \
        'batched_cuda', \
        'async_partition', \
        'sparse_tr_solve_statistics', \
        'sparse_tr_solve_full', \
        'psdd_full', \
        'sparse_tr_solve_low_precision', \
        'generate_binary_executable'] , \
        help='test mode')

  parser.add_argument('--targs', nargs= '*', help= 'Some tests may need additional arguments')

  args = parser.parse_args(argv)

  run(args)

if __name__ == "__main__":
  sys.exit(main())
